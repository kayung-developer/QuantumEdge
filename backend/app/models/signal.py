"""
AuraQuant - AI Trading Signal Database Model
"""
import enum
from typing import Optional, Dict, Any
from datetime import datetime
from uuid import UUID, uuid4

from sqlalchemy import (ForeignKey, String, Enum as SQLAlchemyEnum, JSON, DateTime,
                        func, Text, Float, Boolean)
from sqlalchemy.orm import Mapped, mapped_column, relationship

from app.db.base import Base


class SignalStatus(str, enum.Enum):
    """
    Defines the lifecycle of an AI-generated trading signal.
    """
    # Initial State
    GENERATED = "generated"  # AI has created the signal, pending human review.

    # Human Interaction States
    APPROVED = "approved"  # Human trader approved the signal for execution.
    REJECTED = "rejected"  # Human trader rejected the signal.
    MODIFIED = "modified"  # Human trader approved, but with modified parameters.

    # Execution States
    EXECUTING = "executing"  # The signal has been sent to the orchestrator.
    COMPLETED = "completed"  # The resulting trade has been successfully executed/closed.
    FAILED = "failed"  # Execution failed for some reason.

    # Timed-out state
    EXPIRED = "expired"  # The signal was not actioned within its valid window.


class AISignal(Base):
    """
    Represents a single, actionable trading signal generated by an AI model.
    """
    __tablename__ = "ai_signals"

    id: Mapped[UUID] = mapped_column(primary_key=True, default=uuid4)
    user_id: Mapped[int] = mapped_column(ForeignKey("users.id"), index=True)

    # Signal Source
    model_name: Mapped[str] = mapped_column(String(100), nullable=False)
    model_version: Mapped[str] = mapped_column(String(50), nullable=False)

    # Market Context
    exchange: Mapped[str] = mapped_column(String(50), nullable=False)
    symbol: Mapped[str] = mapped_column(String(50), nullable=False)
    timeframe: Mapped[str] = mapped_column(String(10), nullable=False)

    # Core Signal Parameters
    side: Mapped[str] = mapped_column(String(10), nullable=False)  # 'BUY' or 'SELL'
    entry_price: Mapped[float] = mapped_column(Float, nullable=False)
    stop_loss: Mapped[float] = mapped_column(Float, nullable=False)
    take_profit: Mapped[float] = mapped_column(Float, nullable=False)
    confidence_score: Mapped[float] = mapped_column(Float, nullable=False)

    # State & Lifecycle
    status: Mapped[SignalStatus] = mapped_column(
        SQLAlchemyEnum(SignalStatus), nullable=False, default=SignalStatus.GENERATED, index=True
    )
    generated_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), server_default=func.now())
    expires_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), nullable=False)
    actioned_at: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True))

    # Link to the resulting trade
    orchestrated_order_id: Mapped[Optional[UUID]] = mapped_column(ForeignKey("orchestrated_orders.id"))

    # Human-in-the-loop data
    actioned_by_user: Mapped[bool] = mapped_column(Boolean, default=False)
    modification_details: Mapped[Optional[Dict[str, Any]]] = mapped_column(JSON)

    # Metadata for Explainable AI
    rationale: Mapped[Optional[str]] = mapped_column(Text)  # e.g., "Detected Head and Shoulders pattern"
    signal_metadata: Mapped[Optional[Dict[str, Any]]] = mapped_column(JSON)

    user: Mapped["User"] = relationship()
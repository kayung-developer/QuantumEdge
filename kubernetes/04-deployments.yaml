apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: auraquant-production
spec:
  replicas: 1
  selector: { matchLabels: { app: postgres } }
  template:
    metadata: { labels: { app: postgres } }
    spec:
      containers:
        - name: postgres
          image: postgres:15-alpine
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: "auraquant_db"
            - name: POSTGRES_USER
              valueFrom: { secretKeyRef: { name: auraquant-secrets, key: POSTGRES_USER } }
            - name: POSTGRES_PASSWORD
              valueFrom: { secretKeyRef: { name: auraquant-secrets, key: POSTGRES_PASSWORD } }
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-storage
          persistentVolumeClaim: { claimName: postgres-pvc }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: auraquant-production
spec:
  replicas: 1
  selector: { matchLabels: { app: redis } }
  template:
    metadata: { labels: { app: redis } }
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: auraquant-production
spec:
  replicas: 2 # Start with 2 replicas for high availability
  selector: { matchLabels: { app: backend } }
  template:
    metadata: { labels: { app: backend } }
    spec:
      containers:
        - name: backend
          image: your_dockerhub_username/auraquant-backend:latest # Replace with your image
          ports:
            - containerPort: 8000
          envFrom:
            - secretRef: { name: auraquant-secrets }
          env:
            - name: SQLALCHEMY_DATABASE_URI
              value: "postgresql+asyncpg://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres-service:5432/auraquant_db"
          # --- Health Checks ---
          # Kubernetes will automatically restart the container if these checks fail.
          readinessProbe:
            httpGet: { path: /, port: 8000 }
            initialDelaySeconds: 15
            periodSeconds: 10
          livenessProbe:
            httpGet: { path: /, port: 8000 }
            initialDelaySeconds: 30
            periodSeconds: 20
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: auraquant-production
spec:
  replicas: 2
  selector: { matchLabels: { app: frontend } }
  template:
    metadata: { labels: { app: frontend } }
    spec:
      containers:
        - name: frontend
          image: your_dockerhub_username/auraquant-frontend:latest
          ports:
            - containerPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-worker-deployment
  namespace: auraquant-production
spec:
  replicas: 2 # Scale workers based on task load
  selector: { matchLabels: { app: celery-worker } }
  template:
    metadata: { labels: { app: celery-worker } }
    spec:
      containers:
        - name: celery-worker
          image: your_dockerhub_username/auraquant-backend:latest # Uses the same image as the backend
          command: ["celery", "-A", "app.celery_worker", "worker", "--loglevel=info"]
          envFrom:
            - secretRef: { name: auraquant-secrets }